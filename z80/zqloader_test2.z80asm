// Test snapshot registers
// Eg at a simulator create a z80 snapshot when "Press Space..." appears.
// Then with ZQLoader load that snapshot at real spectrum - check register values. 
// (should be same as at simulator / and see values here below)

 DEVICE ZXSPECTRUM48
 DEFINE tape_file_name    "zqloader_snapshot_test.tap"
 DEFINE basic_name        "qloadertst"

CHAN_OPEN               EQU  0x1601         
PROG                    EQU 23635       // Zx spectrum system variable PROG indicates start address of basic
SCR_CT                  EQU 23692       // avoid Scroll?
CLEAR                   EQU 32768       // CLEAR

/*
BASIC_LEN EQU BASIC_END-BASIC_START     // length of total basic inc mc-rem for SAVETAP


// Write basic numbers shorter visible text allways "0" spares space.
NUM2   MACRO	value
      db "0"
	  db	#0E,0,0
	  dw	value
	  db	#00
      ENDM

BASIC_START:
    MODULE basic1
        INCLUDE	"BasicLib.asm" 
line_useval = 1   ;; Use VAL for numbers

            LINE : db	clear : NUM2(CLEAR) :LEND       // 10 CLEAR 24000
            LINE : db	print, usr, '(', peek : NUM2(PROG) : db '+' : NUM2(256) : db '*',  peek : NUM2(PROG + 1) : db '+' : NUM2(ASM_START) : db ')' : LEND   // 30 RANDOMIZE USR VAL"XXXX"
	        LINE : db	rem                             // 40 REM
//            LEND                                        // (REM)
    ENDMODULE
*/
 
 ORG 30000 
    jp 0            // to test at ZX spectrum if PC is OK
ASM_START:
    ld A, 2                 
    call CHAN_OPEN          // rst 10 goes to screen
    ld DE, TEXT_START
    call PRINT     
    di
    ld (DebugSp), SP        //  keep c350
    ld SP, 50000            // 0xc350
    exx                     
        // I think BC', DE', HL' must be saved for save return to BASIC (or before ei)
        push DE                  // #PP1
        push HL                  // #PP2
        push BC                  // #PP5
    exx
    push IY                     // #PP7

    ld A,0x12                   // note **      
    ld BC, 0x1234
    ld DE, 0x2345
    ld HL, 0x3456
    exx
    ld BC, 0x4567
    ld DE, 0x5678
    ld HL, 0x6789
    exx
    ld IX, 0x4321       // -> AF'
    push IX             // #PP8
    ex AF, AF'
    pop AF              // #PP8
    ex AF, AF'
    ld IX, 0x789A
    ld IY, 0x89AB


    // snapshot is created at 1 of the 4 instructions below
wait_for_key
  	ld A,$7F 	        // Read from port 0xBFFE, read ENTER to break
	in A,($FE)          //  bit 0 is !BREAK,
    rrca                // check for space key pressed, when C: no key
    jr c, wait_for_key

    // When here we are at zxspctrum after loading snapshot 
    // ** Note: we cannot not really test A actually. Is always 'in A' value.

    ld(SpToDe), SP        //  to print SP

    call PRINT_HEX_A      // note **
    
    // print DE first since used as text address
    push DE     // keep because used here as text at PRINTXX address  #PP3
    ld DE, TEXT_DE
    call PRINT
    pop DE     // #PP3
    ld A, D
    call PRINT_HEX_A
    ld A, E
    call PRINT_HEX_A

    // DE is now free to use

    // This will test SP itself
    ld DE, TEXT_SP
    call PRINT
    ld DE, (SpToDe)
    ld A, D
    call PRINT_HEX_A
    ld A, E
    call PRINT_HEX_A
    

    ld DE, TEXT_BC
    call PRINT    
    ld A,B
    call PRINT_HEX_A
    ld A,C
    call PRINT_HEX_A




    ld DE, TEXT_HL
    call PRINT    
    ld A,H
    call PRINT_HEX_A
    ld A,L
    call PRINT_HEX_A

    ld DE, TEXT_BCa
    call PRINT    
    exx
    ld A,B
    exx
    call PRINT_HEX_A
    exx
    ld A,C
    exx
    call PRINT_HEX_A

    ld DE, TEXT_DEa
    call PRINT    
    exx
    ld A,D
    exx
    call PRINT_HEX_A
    exx
    ld A,E
    exx
    call PRINT_HEX_A

    ld DE, TEXT_HLa
    call PRINT    
    exx
    ld A,H
    exx
    call PRINT_HEX_A
    exx
    ld A,L
    exx
    call PRINT_HEX_A

    ld DE, TEXT_AFa
    call PRINT    
    ex AF, AF'      // ld DE, AF'
    push AF
    ex AF, AF'
    pop DE
    ld A, D
    call PRINT_HEX_A
    ld A, E
    call PRINT_HEX_A

    ld DE, TEXT_IX
    call PRINT    
    ld A, IXH
    call PRINT_HEX_A
    ld A, IXL
    call PRINT_HEX_A

    ld DE, TEXT_IY
    call PRINT    
    ld A, IYH
    call PRINT_HEX_A
    ld A, IYL
    call PRINT_HEX_A

    ld DE, TEXT_R
    call PRINT    
    ld A, R
    call PRINT_HEX_A

    ld DE, TEXT_I
    call PRINT    
    ld A, I
    call PRINT_HEX_A

    // wait for key release!
wait_for_key2
  	ld A,$7F 	        // Read from port 0xBFFE, read ENTER to break
	in A,($FE)          //  bit 0 is !BREAK,
    rrca                // check for space key pressed, when C: no key
    jr nc, wait_for_key2

    // wait for key again!
wait_for_key3
  	ld A,$7F 	        // Read from port 0xBFFE, read ENTER to break
	in A,($FE)          //  bit 0 is !BREAK,
    rrca                // check for space key pressed, when C: no key
    jr c, wait_for_key3
 
end_to_basic:
    pop IY              // #PP7
    exx
        pop BC          // #PP5
        pop HL          // #PP2
        pop DE          // #PP1
    exx
    ld SP, (DebugSp)
    ei                  // #di1
    ret   
DebugSp: DS 2
SpToDe : DS 2

// does /should not change any register
PRINT_HEX_A:
    push DE
    push AF
    ld d, a
    rra
    rra
    rra
    rra
    call .print_hex_nibble_A
    ld a, d
    call .print_hex_nibble_A

    pop AF
    pop DE
    ret
.print_hex_nibble_A
    and 0b00001111
    add '0'
    cp '9' + 1
    jr c, .ok
    add 'A' - ('9' + 1)
.ok
    
    call PRINTCHAR
    ret


// Print bit7-terminated string
// DE: address of string
PRINT:
.loop    
    ld A, (DE)
    inc DE
    bit 7,A
    jr nz, .last
    call PRINTCHAR
    jr .loop
.last    
    and 0x7f
    call PRINTCHAR 
    ret

PRINTCHAR
    ld (SCR_CT),a           // avoid Scroll?
    push IY
    exx
    push DE
    push BC
    exx
    ex AF, AF'
    PUSH AF
    ex AF, AF'
    rst 0x10
    ex AF, AF'
    pop AF
    ex AF, AF'
    exx
    pop BC
    pop DE
    exx
    pop IY
    ret


TEXT_START:    
    DC "Create snapshot now.\rThen press space at ZX...\r"        // \r is a newline
TEXT_A:    
    DC " A="       
TEXT_BC:    
    DC " BC="      
TEXT_DE:    
    DC " DE="      
TEXT_HL:    
    DC " HL="      
TEXT_AFa:    
    DC " AFa="      
TEXT_BCa:    
    DC " BCa="     
TEXT_DEa:    
    DC " DEa="     
TEXT_HLa:    
    DC " HLa="     
TEXT_IX:    
    DC " IX="      
TEXT_IY:    
    DC " IY="      
TEXT_I:    
    DC " I="       
TEXT_R:    
    DC " R="       
TEXT_SP
    DC " SP="
ASM_END
/*
 MODULE basic1
    LEND                                        // (REM)
 ENDMODULE    

BASIC_END:
*/

// DISPLAY "-- Creating file: ", tape_file_name
// EMPTYTAP tape_file_name
// SAVETAP <filename>,    BASIC,<filenameintapeheader>,<start>,     <length> [,<autorunline>[,<lengthwithoutvars>]]
 //SAVETAP    tape_file_name, CODE, basic_name,        ASM_START, ASM_END-ASM_START, ASM_START

 IF __ERRORS__ == 0
    // to be loaded by simulator
    SAVESNA   "zqloader_snapshottest.sna", ASM_START
 ENDIF