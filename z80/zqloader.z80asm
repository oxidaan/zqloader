//==============================================================================
// PROJECT:         zqloader
// FILE:            turboblock.z80asm
// DESCRIPTION:     ZX Spectrum Z80 assember file for turboloader 'zqloader'
// 
// Copyright (c) 2023 Daan Scherft [Oxidaan]
// This project uses the MIT license. See LICENSE.txt for details.
//==============================================================================


// To be assembled with sjasmplus see https://github.com/z00m128/sjasmplus
// sjasmplus --fullpath     \
//    -ipath/to/sjasmplus/examples/BasicLib \
//    --exp=path/to/zqloader/z80/zqloader.exp \
//    --lst --syntax=abf --color=on       \
//    path/to/zqloader/z80/zqloader\z80\zqloader.z80asm  

    DEVICE ZXSPECTRUM48

    DEFINE tape_file_name    "zqloader.tap"         // main output is a TAP file
    DEFINE basic_name        "zqloader"             // name for tap file ZX spectrum will see


//----------------------------------------------------------------------------

CHAN_OPEN               EQU 0x1601         
PROG                    EQU 23635       // Zx spectrum system variable PROG indicates start address of basic
SCR_CT                  EQU 23692       // avoid Scroll?

SCREEN_23RD             EQU 16384+4*1024
SCREEN_END              EQU 16384+6*1024


//----------------------------------------------------------------------------
CLEAR                   EQU 24500       // CLEAR eg horace (H.spiders: 24575)   min:24290

//----------------------------------------------------------------------------
LEADER_MIN_EDGES        EQU 200         // Minimum edges a leader need to have to be accepted

LEADER_MAX              EQU 12          // a valid leader pulse is between LEADER_MAX and LEADER_MIN
LEADER_MIN              EQU 8           // 

SYNC_MAX                EQU LEADER_MIN-1//  a sync is between SYNC_MIN and SYNC_MAX
SYNC_MIN                EQU 4           //

ONE_MAX                 EQU 12          // 
ONE_MIN                 EQU 4           // 


//----------------------------------------------------------------------------

ASM_LOWER_LEN   EQU ASM_LOWER_END - ASM_LOWER_BEGIN     // length of lower code 
ASM_UPPER_LEN   EQU ASM_END - ASM_UPPER_BEGIN           // length of code to be moved to upper for org/disp 0xffff - ASM_UPPER_LEN

// ===========================================================================
// ===========================================================================
 

// Write basic numbers shorter; but visible text allways "0". Spares space.
NUM2   MACRO	value
      db "0"
	  db	#0E,0,0
	  dw	value
	  db	#00
      ENDM

BASIC_START:
    MODULE basic1
        INCLUDE	"BasicLib.asm" 
//            LINE : db	paper : NUM2(0) : db ':', ink : NUM2(0): db ':', cls :LEND  
            LINE : db	clear : NUM2(CLEAR) :LEND       
            LINE : db	print, usr, '(', peek : NUM2(PROG) : db '+' : NUM2(256) : db '*',  peek : NUM2(PROG + 1) : db '+' : NUM2(ASM_START) : db ')' : LEND   
 //           LINE : db load, '"','"' : LEND
	        LINE : db	rem                             
    ENDMODULE

// ===========================================================================

BASIC_LEN EQU BASIC_END-BASIC_START                     // length of total basic inc mc-rem for SAVETAP

    DISPLAY "BASIC_START = ",/A,BASIC_START             // usually 0
    DISPLAY "BASIC_LEN = ",/A,BASIC_LEN                 // total length of BASIC including MC code-REM (so total length)
    DISPLAY "BASIC_END = ",/A,BASIC_END                 // end of BASIC s/a BASIC_LEN since BASIC_START is zero
    DISPLAY "ASM_START = ",/A,ASM_START                 // offset of MC code from BASIC_START
    DISPLAY "ASM_END = ",/A,ASM_END                     // len/end of total mc
    DISPLAY "ASM_LOWER_BEGIN = ",/A,ASM_LOWER_BEGIN     // offset of lower from start of basic
    DISPLAY "ASM_LOWER_LEN = ",/A,ASM_LOWER_LEN         // length of lower
    DISPLAY "ASM_UPPER_LEN = ",/A,ASM_UPPER_LEN         // length of upper (copied to upper)
    DISPLAY "ASM_UPPER_BEGIN = ",/A,ASM_UPPER_BEGIN     // offset of upper begin eg 376
    DISPLAY "ASM_UPPER_START = ",/A,ASM_UPPER_START     // start of upper begin eg 65253

ASM_START:
    // move loader to upper regions.
    ld HL, (PROG)               // PROG variable contains start of BASIC typically 23755
    ld DE, ASM_UPPER_BEGIN      // offset from start of BASIC
    add HL, DE                  // HL = (PROG) + ASM_UPPER_BEGIN
    ld (load_address_at_basic), HL    // keep for later (eg 24036)    (or 24117)
    ld DE, ASM_UPPER_START 
    ld BC, ASM_UPPER_LEN - 2    // -2 do NOT overwrite load_address_at_basic just written
    ldir
    // clear screen
    ld HL, 16384
    ld DE, 16385
    ld BC, 6*1024 + 3 * 256
    ld (HL), 0
    ldir

 


// ===========================================================================



ASM_LOWER_BEGIN: 
    ld A, 2                 
    call CHAN_OPEN              // rst 10 goes to screen
    ld DE, TEXT_START
    call PRINT                  // print "Loading..." 
    di                          // #di1          
    exx                     
        // I think BC', DE', HL' must be saved for save return to BASIC (or before ei)
        push DE                 // #PP1
        push HL                 // #PP2
        push BC                 // #PP5
    exx
    
    
  
//============================================================================
// Load one turbo block, then decompresses block.
// Loads header first. Header determines target location, compression type etc.
// When error prints error and returns.
// When loaded ok header indicates what to do:
//   continue to next block or
//   return to BASIC or
//   jump to start address as in RANDOMIZE USR xxxxx.
//============================================================================
next_block:
LOAD:    

    // Intialize edge plus border color -> C
    // So get intial value from port->C
    
    // E=ear, M=mic, K-keyboard, B = bordercolor
    //            7  6  5  4  3  2  1  0
    // in(0xfe):  0  E  0  K  K  K  K  K    
    // out(0xfe): d  d  d  E !M  B  B  B  
    ld A,$7F 	                // Read from port 7FFE eg !BREAK is bit 0.
    in A,($FE)                  // Get initial value; bit 0 is space, bit 6 is ear
    and   0b01000000            // mask ear
    or    0b00001010            // ear zero border red 010 <-> 101 cyan + also set mic and/or ear
    ld C, A                     // initialize c with result: 0E0EEBBB
    ld H, 0b01000111            // The C xor value, see WAIT_FOR_EDGE


    // Initialize for loading header
    exx                     
        ld HL, header-1         // location of header @ (++HL)
        ld DE, sizeof_header    // length of header 
        ld C, sizeof_header     // checksum - use header length as init. value.
    exx

    call LOAD_HEADER_PLUS_DATA  // upper, call is ok
    jr z, error                 // error  

    // check checksum
    exx
    ld A, C                     // this is LD A, C' check checksum C' should be zero
    exx
    sub 1                       // carry only when zero so ok (note: dec A does not affect c!)
    jr nc, checksum_error

    // -- Once here here a turbo block was correctly loaded --


load_ok:
    ld DE, (m_clear_address)    // clear address/SP
    push DE                     // PP3 check later. might get lost when header overwritten
    ld DE, (m_usr_start_address)// just loaded last block last/start address
    push DE                     // PP4 check later. might get lost when header overwritten
    ld DE, (m_dest_address)     // destination address to copy/uncomress to
    ld A,D                      // check dest address is zero skip copy or decompressing
    or E
    jr z, copy_done             // dest zero then skip copy or decompressing
    
    // -- Now DE is copy destination address --

    ld HL, (m_load_address)     // where data was received at load, when 0 take load_address_at_basic
      
    ld A, H
    or A
    jr nz, .hl_is_load_address
    ld HL, (load_address_at_basic)               

.hl_is_load_address
    ld BC, (m_length)           

    // -- Now DE is m_dest_address;  HL is m_load_address (or load_address_at_basic), BC is m_length --

    ld A, (m_compression_type)  // compression type
    dec A
    jr z, DECOMPRESS            // m_compression_type == 1
  //  dec A
  //  jr z, SCREEN_DECOMPRESSION



 

just_copy:    
    // must be copy to DE without compresion
    // all registers for ldir still fine.
    ldir
//    jr copy_done


SCREEN_DECOMPRESSION:           // TODO


decompress_done:
copy_done:

    pop HL                      // PP4 user start addres/last block?
    pop DE                      // PP3 clear_address/sp
    ld A, H
    or L
    jr z, next_block            // when HL == 0 continue to next block
    ld A, L
    dec A
    jr z, copy_me_to_screen     //  when HL = 1 copy to screen, then to next block
  
    dec A
    jr z, end_to_basic     // HL = 2 so last block but do not start MC, return to BASIC.

    // -- When here: --
    // -- HL is start addres as in RANDOMIZE USR xxxxx --
    // -- DE is address as in CLEAR xxxxx. --
call_usr:
    ld A,D                      // when not 0 do m_clear_address -> SP
    or E
    jr z, go_go_go
    ex DE, HL                   // This is ld SP, DE
    ld SP, HL                   // put SP at CLEAR address.
    ex DE, HL
go_go_go:   
    ei                          // #di1 (this is needed for a game like Galaxians)
    jp HL                       // go-go-go! note: this also means HL is PC once there

copy_me_to_screen:
    ld HL, (PROG)               // PROG variable contains start of BASIC typically 23755
    ld DE, ASM_LOWER_BEGIN      // offset from start of BASIC
    add HL, DE                  // HL = (PROG) + ASM_LOWER_BEGIN
    ld DE, SCREEN_23RD          // lower 3rd of screen
    ld BC, ASM_LOWER_LEN             
    ldir
    ld SP, SCREEN_END - SNAPSHOT_CODE_LEN           // also put stack at (end of) screen! We cant go back to basic anyway
    ld HL, SCREEN_23RD + ASM_LOWER_LEN
    ld (load_address_at_basic), HL                  // also adjust this!!
    jp SCREEN_23RD + next_block - ASM_LOWER_BEGIN      // and go on from there (load_ok)

// Show error messages
checksum_error:
    ld DE, TEXT_CHECKSUM_ERROR
    call PRINT

error:
    ld DE, TEXT_ERROR
    call PRINT

end_to_basic:
    exx
        pop BC                  // #PP5
        pop HL                  // #PP2
        pop DE                  // #PP1
    exx  
    ei                          // #di1
    ret    



//============================================================================
// RLE decompress. Both 1st most occuring as 2nd most occoring bytes are coded.
// Largely ldir compatible so:
// HL: Source
// DE: Dest
// BC: Length/counter
// A, IX is touched.
DECOMPRESS
//    di                        // di2 IY is used in interrupts and here so di - already don though.
    push IY
    // 40 T 8B
    ld IX, (m_rle_most)         // IXH = not used; IXL = (m_rle_most+0) so most
    ld IY, (m_rle_min1)         // IYH = (m_rle_min1+1) so min2; IYL = (m_rle_min1+0) so min1
.beginloop:
    ld A, (HL)                  // take a byte
    inc HL                      // move to next byte
    dec BC                      // decrement counter
    cp IYL                      // is it min1?
    jr z, .write_max1           // then write max1
    cp IYH                      // is it min2?
    jr z, .write_max2           // then write max2
.write_A:                 
    ld (DE), A                  // normal write
    inc DE
.nextloop    
    ld A, B                     // check zero
    or C
    jr nz, .beginloop
    pop IY
//    ei                        // di2
    jr decompress_done          // was: ret 
.write_max2:  
    cp (HL)                     // A must still be min2
    jr z, .itsmin               // a second min2 seen, write min2 as value
    ld A, (HL)                  // A=value to write (val)    
    dec BC                      // decrement counter
    inc HL
    jr .write_rle_bytes
.write_max1:                    // occurs move often so put last to avoid jump
    cp (HL)                     // A must still be min1
    jr z, .itsmin               // a second min1 seen, write min1 as normal value
    ld A, IXL                   // A=most
.write_rle_bytes:    
    // write value in A (HL)-times to DE, DE and HL updated.
    // With ldir hard to write just one byte: so
    // with djnz, shorter, loop slightly slower 21 vs 26, can write one byte easily, no need to push hl
    push BC
    ld B, (HL)                  // count
.loop    
    ld (DE), A
    inc DE
    djnz .loop
    pop BC
    
    inc HL
    dec BC
    jr .nextloop

.itsmin:                        // write min1 or min2 as normal value. This should occur rarely
    inc HL                      // just need to increase HL, A is min1 or min2
    dec BC          
    jr .write_A
 
//============================================================================
//============================================================================
//============================================================================


ASM_LOWER_END: 
ASM_UPPER_BEGIN:    
    DISP  0xffff-(ASM_UPPER_LEN -1)     // ENT



//============================================================================



ASM_UPPER_START:


// Print bit7-terminated string
// Note: needs to be at upper to have a fixed addres to be used by call.
// DE: address of string
PRINT:
.loop    
    ld A, (DE)
    inc DE
    ld (SCR_CT),A               // avoid "Scroll?"
    bit 7,A
    jr nz, .last
    rst 0x10
    jr .loop
.last    
    and 0x7f
    rst 0x10
    ret

 //============================================================================
 //============================================================================
 

//============================================================================
// LOAD_HEADER_PLUS_DATA
// HL' storage location-1, must be header location-1.
// DE': # bytes to load must be size of header.
// C: last IN at WAIT_FOR_EDGE; border color.
// C': Checksum init value must also be sizeof header.
// Out:
// When OK: The header plus data is read.
// C': checksum / must be zero at end when ok. 
// L: last byte loaded.
// At return:
//  z=0  ok
//  z=1  Timeout or error (B==0)
LOAD_HEADER_PLUS_DATA:

// wait for edge until enter pressed.
// Note value of B is not really relevant at first.
wait_for_first_edge:     
    ld A,$BF 	                // Read from port 0xBFFE, read ENTER to break
    in A,($FE)                  // bit 0 is !ENTER
    rrca                        // check for key pressed, when C: no key
    ret nc
    call WAIT_FOR_EDGE
    jr z,  wait_for_first_edge  // When z timeout: no edge.  Note B is now 0

    // --- We now saw a (single) edge ---
    
    // First need at least 200 edges with matching time between LEADER_MIN(8#) -- LEADER_MAX (12#)
    // B out-> 12#11 10 09 08 07 06 05 04 03 02 01  00    # ->B out
    //          1  2  3  4  5  6  7  8# 9 10 11 12  (12)  # cycles (#INs done)
    //          -  -  -  -  -  -  - ok ok ok ok ok  t/o     (- = to soon)

    ld L, LEADER_MIN_EDGES      // (eg 200) > 200 correct edges needed
.leader_loop1:    
    ld B, LEADER_MAX            // # counts = max acceptable time between edges
    call WAIT_FOR_EDGE
    jr z, wait_for_first_edge   // T/O no edge (note B is 0 when T/O)

    ld A, B
    cp LEADER_MAX+2-LEADER_MIN   // minimum acceptable time between edges (eg 12+2-8=6)
    // B > LEADER_MAX-LEADER_MIN (eg 4) : waited shorter than LEADER_MIN -> nc -> nok to soon
    jr nc,wait_for_first_edge   // edge < LEADER_MIN so to soon (-)
    dec L                       // #matching edges B = 4,3,2,1
    jr nz, .leader_loop1

    // --- We now saw 200 ('LEADER_MIN_EDGES') valid leader cycles ---

    // Continue with leader but now also check for sync
    // eg LEADER_MAX (12#), LEADER_MIN(8), SYNC_MIN(4#)
    // B out-> 12#11 10 09 08 07 06 05 04 03 02 01  00    # ->B out
    //          1  2  3  4# 5  6  7  8# 9 10 11 12  (12)  # cycles (#INs done)
    //          -  -  -  S  S  S  S ld ld ld ld ld  t/o    (- = to soon)

.leader_loop2:        
    ld B, LEADER_MAX    
    call WAIT_FOR_EDGE
    jr z, wait_for_first_edge   // > LEADER_MAX counts no edge: timeout (note B is 0 when T/O)
    ld A, B                     
    cp LEADER_MAX+2-SYNC_MIN    // minimum acceptable time between edges eg(12+2-4=10)
    // B > LEADER_MAX-SYNC_MIN : waited shorter than SYNC_MIN -> nc -> nok to soon
    jr nc,wait_for_first_edge   // edge < SYNC_MIN counts, (B=9,11,11) to soon not even a sync to soon start all over
    cp LEADER_MAX+2-LEADER_MIN 	// (12+2-8=6) edge SYNC_MIN-LEADER_MIN counts its a sync
    // B > LEADER_MAX-LEADER_MIN : waited shorter than LEADER_MIN but longer than SYNC_MIN -> its a sync
    jr c, .leader_loop2         // edge between LEADER_MIN-LEADER_MAX counts valid leader but no sync continue

    // --- We now saw a sync (eg B=8,7,6,5) ---
    // When fails now do not try again.
    // call PRINT_DEBUG

    ld    A, C
    xor   0b00000011            //  Toggle border 001 red <-> 110 yellow from now on
    ld    C, A

    
    //  ld HL', header            // already done
    //  ld DE', sizeof_header     // already done
    call LOAD_BYTES             // load header
    ret z                       // loading error

  
    // -- We now have read a header --

    // Intialize using header just read.
    // Initialize length as from header read.
    // Initialize load location as from header just read.
    // when 0 (at least ixh), load into basic at REM ie load_address_at_basic
    exx
        ld DE, (m_length)       // now has length of data to be received 
        ld HL, (m_load_address) // m_load_address
        ld A, H
        or A
        jp nz, .not_basic       // LOAD data, normal
        ld HL, (load_address_at_basic)          // when 0 load at load_address_at_basic REM overwritting our loader code there
.not_basic    
        dec HL                  // @Opt (++HL)
        ld A, D
        or E
    exx
    jr z, load_done             // length zero nothing more to do, but need to unset z


//============================================================================

  MACRO READ_ONE_BIT            // 111T states
    ld B, D                     // # counts eg 12
    call WAIT_FOR_EDGE          // 69T
    ret z
    ld A, B
    cp E                        // (eg 12+2-6=8)
    rl L    
  ENDM
  MACRO READ_ONE_BIT_NO_RETZ    // 42T states
    ld B, D                     // # counts eg 12
    call WAIT_FOR_EDGE          // #3
    ld A, B
    cp E                        // (eg 12+2-6=8)
    rl L    
  ENDM  




//============================================================================
// LOAD_BYTES
// In:
// HL' storage location, this is modified (walks to end) (was IX)
// DE': # bytes to load (including not stored checksum byte), this is modified (walks down to zero) (was DE)
// C: last IN at WAIT_FOR_EDGE; border color.
// C': Checksum init value must be sizeof header. (was H)
// Out:
// C': checksum / must be zero at end when ok. (was H)
// L: last byte loaded.
//  z=1 error
//  z=0 ok
// Used:
// HL': (increases)
// DE': (walks to zero)
// C': Checksum
// H: must be 0b01000111 
// L: Now/Last loaded byte
// B: timing at WAIT_FOR_EDGE
// C: last IN value to check changes; border color at WAIT_FOR_EDGE
// D: ONE_MAX, used to to quickly put in B
// E: ONE_MAX+2-ONE_MIN, used to to quickly compare to B
// A: temporary storage
//
// eg ONE_MAX (12#), ONE_MIN(6#)
// B out-> 12#11 10 09 08 07 06 05 04 03 02 01  00    # ->B out
//          1  2  3  4  5  6# 7  8  9 10 11 12  (12)  # cycles (#INs done)
//          0  0  0  0  0  1  1  1  1  1  1  1  t/o     (- = to soon)
LOAD_BYTES:   

BIT_LOOP_MAX+*:     ld D, ONE_MAX
BIT_ONE_THESHLD+*:  ld E, ONE_MAX+2-ONE_MIN     // eg 12+2-6 = 8

    ld B, 200                   // @Opt Mini sync
    call WAIT_FOR_EDGE          // @Opt Mini sync
    ret z                       // @Opt Mini sync

.nextbyte    

// Time between WAIT_FOR_EDGE calls: 42T
// Min Time between IN's 42T + 69T = 111T
// Max Time between IN's 82T + 69T = 151T
// entire byte = 391T + 8 * 69 = 943T (~118T per bit @@)
.nextbit              
    READ_ONE_BIT

.nextbit2             
    READ_ONE_BIT

    READ_ONE_BIT

    READ_ONE_BIT_NO_RETZ
    exx 
        inc HL                  // @Opt  (++HL) @Opt spreading
        dec de                  // spreading
    exx                         // 20T

    READ_ONE_BIT

    READ_ONE_BIT

    READ_ONE_BIT

    READ_ONE_BIT_NO_RETZ
    

    // -- We now have a new byte in L --

    // store loaded byte L ->(HL')
    ld A, L
    exx
        ld (HL), A              // HL'= storage pointer
        add C                   // C' is checksum
        ld C, A                 // DE'= byte count
        ld A, D                 // check DE zero
        or E
    exx
    
    jp nz, .nextbyte            // 61T since WAIT_FOR_EDGE; 61+62 = 123 since last in
    // done!
load_done    
    cp D                        // D != 0 for sure so this unsets z
    ret

//============================================================================
// WAIT_FOR_EDGE
// Before before IN: 7 T states excl. call excl. IN itself
// Since last IN: 62 T States including IN itself and ret
// Cycle time between IN's : 22 + 12 + 16 = 50 T
// Immidiate edge seen: (1 IN) 69 T states, excl. call incl. ret; B not changed
// 1 cycle (2 IN's):               50 + 69 = 119 T states B = B-1
// n cycle (n+1 IN's):         (n*50) + 69       T states B = B-n
// timeout done B IN's       (B-1)*50 + 69       T States B = 0 
// C is last edge plus border color, flips when changed: 0E000BBB
// H the C xor value, must be 0b01000111 or 01011111
// B in is max counter out: counts left.
// #IN's done =  1 + B-in - B-out
// DE, HL not touched
// Return:
//  z=1  timeout
//  z=0 OK
wait_for_edge_loop:    
    dec B                       // Dec. cycle count (carry not touched) 43 since in
    ret z                       // 5/11T t/o, note carry still not set    (c=0 z=1)
WAIT_FOR_EDGE:        
    ld A,$7F 	                // Read from port 0x7FFE, read BREAK and EAR. 49 + 16 since prev. IN is 59 
    in A,($FE)                  // bit 0 is !BREAK, bit 6 is ear
    xor C                       // detect change at ear (also reset carry)
    and 0b01000000              // mask ear 
    jr z, wait_for_edge_loop    

    // -- Once here: change seen --

    // C = 0E001BBB
    ld A,C           
    xor H                       // H = 01000111 or 01011111
    ld C,A
    out ($FE),A                 // toggle border color      // 000EMBBB
    ret                         // += 51T (c=1 z=0)

//============================================================================
//============================================================================

TEXT_START:    
    DC " Loading...\r"        // \r is a newline
TEXT_CHECKSUM_ERROR:    
    DC "CHECKSUM "      
TEXT_ERROR:    
    DC "ERROR\r"

//============================================================================
// s/a struct TurboBlock::Header
//============================================================================

sizeof_header equ 15
header:  BLOCK sizeof_header 
m_length equ header + 0
m_load_address equ header + 2
m_dest_address equ header + 4
m_compression_type equ header + 6
m_checksum equ header + 7
m_usr_start_address equ header + 8
m_clear_address equ header + 10
m_rle_most equ header + 12
m_rle_min1 equ header + 13
m_rle_min2 equ header + 14
//m_copy_to_screen equ header + 15


load_address_at_basic: BLOCK 2

// ===========================================================================
// ===========================================================================

// ===========================================================================
    ENT         // DISP
// ===========================================================================
ASM_END


// ===========================================================================

    MODULE basic1
        LEND                                        // end of REM line
    ENDMODULE
BASIC_END

// ===========================================================================



 

// ===========================================================================
    DISPLAY "-- Creating file: ", tape_file_name
    EMPTYTAP tape_file_name
    // SAVETAP <filename>,    BASIC,<filenameintapeheader>,<start>,     <length> [,<autorunline>[,<lengthwithoutvars>]]
    SAVETAP    tape_file_name,BASIC,basic_name,        BASIC_START, BASIC_LEN, 10
// ===========================================================================




// ===========================================================================
// Snapshot register-load code -> snapshotregs.bin
// ===========================================================================

// LOAD_SNAPSHOT EQU SCREEN_23RD + BASIC_LEN - ASM_LOWER_BEGIN
LOAD_SNAPSHOT EQU SCREEN_END - SNAPSHOT_CODE_LEN


 ORG 0
SNAPSHOT_CODE_BEGIN
                    ld SP, LOAD_SNAPSHOT +  SnapShotStack   
flags_and_border+1: ld A, 0     
                    out ($FE),a // border color 0xD3 0xFE
BC_reg+1:           ld BC, 0    
DE_reg+1:           ld DE, 0    
HL_reg+1:           ld HL, 0    
                    exx         
                    ex af, af'  
BCa_reg+1:          ld BC, 0    
DEa_reg+1:          ld DE, 0    
HLa_reg+1:          ld HL, 0    
                    pop AF              
                    ex af, af'          
                    exx                 
IX_reg+*:           ld IX, 0            
IY_reg+*:           ld IY, 0            
R_reg+*:            LD A, R_reg              
                    LD R, A                  
I_reg+*:            LD A, I_reg              
                    LD I, A                  
                    pop AF          // AF itself
SP_reg+*:           ld SP, 0        
imode:              im 1            
ei_di:              ei              
PC_reg+*:           jp 0            
SnapShotStack:
Fa_reg:  DEFS 1
Aa_reg:  DEFS 1
F_reg:   DEFS 1
A_reg:   DEFS 1



// ===========================================================================
SNAPSHOT_CODE_END

SNAPSHOT_CODE_LEN EQU SNAPSHOT_CODE_END-SNAPSHOT_CODE_BEGIN 
 DISPLAY "SNAPSHOT_CODE_BEGIN = ",/A,SNAPSHOT_CODE_BEGIN
 DISPLAY "SNAPSHOT_CODE_END = ",/A,SNAPSHOT_CODE_END
 DISPLAY "SNAPSHOT_CODE_LEN = ",/A,SNAPSHOT_CODE_LEN
 DISPLAY "LOAD_SNAPSHOT = ",/A,LOAD_SNAPSHOT 
 //DISPLAY "SCREEN_23RD + BASIC_LEN - ASM_LOWER_BEGIN = ",/A, SCREEN_23RD + BASIC_LEN - ASM_LOWER_BEGIN
 //DISPLAY "(load address at basic=)     SCREEN_23RD + ASM_LOWER_LEN = ",/A, SCREEN_23RD + ASM_LOWER_LEN
 //DISPLAY "(end load address at basic=) SCREEN_23RD + ASM_LOWER_LEN + ASM_UPPER_LEN= ",/A, SCREEN_23RD + ASM_LOWER_LEN + ASM_UPPER_LEN
 //DISPLAY "SCREEN_23RD + load_ok - ASM_LOWER_BEGIN = ",/A, SCREEN_23RD + load_ok - ASM_LOWER_BEGIN
 
 SAVEBIN "snapshotregs.bin", SNAPSHOT_CODE_BEGIN, SNAPSHOT_CODE_LEN
// ENT

// ===========================================================================
// export to zqloader.exp
// ===========================================================================

 EXPORT ASM_UPPER_LEN
 EXPORT ASM_UPPER_START
 EXPORT CLEAR

 EXPORT LOAD_SNAPSHOT
 EXPORT flags_and_border
 EXPORT BC_reg
 EXPORT DE_reg
 EXPORT HL_reg
 EXPORT BCa_reg
 EXPORT DEa_reg
 EXPORT HLa_reg
 EXPORT IX_reg
 EXPORT IY_reg
 EXPORT R_reg
 EXPORT I_reg 
 EXPORT imode
 EXPORT ei_di
 EXPORT SP_reg 
 EXPORT PC_reg 
 EXPORT Fa_reg 
 EXPORT Aa_reg 
 EXPORT A_reg 
 EXPORT F_reg 
 EXPORT sizeof_header   // so can check at C++
 EXPORT BIT_LOOP_MAX
 EXPORT BIT_ONE_THESHLD
 EXPORT ASM_LOWER_END
 EXPORT ASM_UPPER_START


 // ===========================================================================
